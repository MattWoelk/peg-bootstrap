This is an example “hello world” “literate program” for the “handaxeweb” system.

So first we have the basic structure of a C program:

    <<includes>>
    <<other functions>>

    int main(int argc, char **argv) {
        <<main program>>
    }

Now, in this program, we want to at least greet the user:

    (in main program)
    printf("hello, user!\n");

That’s all well and good, but we need to include the relevant header
file for printf:

    (in includes)
    #include <stdio.h>

Suppose we also want to print out the value of a trig function.

    (in main program)
    printf("the cosine of zero is %f.\n", cos(0.0));

For that we need to include another header file:

    (in includes)
    #include <math.h>

Finally, we should return a value from main:

    (in main program)
    return 0;

And to build the program, we will probably need to include the math
library.

    (in buildscript)
    cc -Wall -o hello hello.c -lm

This demonstrates both the good and the bad of handaxeweb.  The good:

- It’s simple.
- It’s very simple.
- Wow boy, is it simple.
- Chunks default to empty rather than errors, so you can develop incrementally.
- You can embed many files in the same input file; `handaxeweb.py buildscript`
  in this case will extract the build script.
- You can present the code in pretty much any order you want.
- You can append to a pre-existing chunk, so you don’t have to define
  like thirty dumb chunk names.
- It preserves indentation.
- The input format is well suited to things like HTML and Markdown.

The bad:

- Chunks default to empty rather than errors, so misspellings will result in
  subtle failures.
- There’s no “weave” stage, so any production of printed or hypertext
  documentation requires some separate program that is tolerant of
  handaxeweb’s peculiar input format.
